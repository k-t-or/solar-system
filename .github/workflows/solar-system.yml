name: solar system workflow

on:
    workflow_dispatch:
    push:
        branches:
          - main
          - 'feature/*'

env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
    unit-testing:
        name: unit testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password

        
        strategy:
            matrix:
                nodjs_version: [18, 20]
                operating_system: [ubuntu-latest]
                
        runs-on: ${{ matrix.operating_system }}
        steps:
        - name: unit testing
          uses: actions/checkout@v4

        - name: setup nodejs version -18
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodjs_version }}

        - name: cache npm dependencies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

        - name: install dependencies
          run: npm install

        - name: unit testing
          id: nodejs-unit-testing-step
          run: npm test

        - name: archive test results
        
          if: always() 
          uses: actions/upload-artifact@v3
          with:
            name: mocha-test-result
            path: test-results.xml

    code-coverage:
        name: code coverage
        container:
          image: node:18
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            options:
               --name mongo
            
        env:
          MONGO_URI: 'mongodb://mongo:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        runs-on: ubuntu-latest
        steps:
        - name: checkout repository
          uses: actions/checkout@v4

        # - name: setup nodejs version -18
        #   uses: actions/setup-node@v3
        #   with:
        #     node-version: 18

        - name: cache npm dependencies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

        - name: install dependencies
          run: npm install
        
        - name: check code coverage
          continue-on-error: true
          run: npm run coverage
        
        - name: archive test result
          uses: actions/upload-artifact@v3
          with:
            name: code-coverage-result
            path: coverage
            retention-days: 5

    docker:
        name: containerization
        needs: [unit-testing, code-coverage]
        runs-on: ubuntu-latest
        permissions: 
          packages: write
        steps:
        - name: checkout repo
          uses: actions/checkout@v4

        - name: dockerhub login
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }} 

        - name: ghcr login
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}  


        - name: docker build for testing
          uses: docker/build-push-action@v4
          with:
            context: .
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }} 

        - name: docker image test
          run: |
            docker images
            docker run --name solar-system-app -d -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

            export IP=$(docker inspect -f '{{range .Networksettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP

            echo Testing image url using wget
            wget -q -O - 127.0.0.1:3000/live | grep live

        - name: container registry push
          uses: docker/build-push-action@v4
          with:
            context: .
            push: true
            tags: | 
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
              ghcr.io/nikosrepos/solar-system:${{ github.sha }}


    dev-deploy:
      if: contains(github.ref, 'feature/')
      needs: docker
      environment:
        name: development
        url: https://${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }} 
      outputs:
        APP_INGRESS_URL: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
      runs-on: ubuntu-latest
      steps: 
      - name: checkout repo
        uses: actions/checkout@v4

      - name: k8s kubeconfig
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: install kubectl clt
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.26.0'

      - name: fetch k8s cluster details
        run: |
          kubectl version 
          echo ----------------
          kubectl get nodes

      - name: save nginx ingress controller ip as a github env variable
        run: |
          echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}")" >> $GITHUB_ENV

      - name: Replace tokens in manifest files
        uses: cschleiden/replace-token@v1
        with:
          tokenPrefix: '_{_'
          tokenSuffix: '_}_'
          files: '["kubernetes/development/*.yaml"]'
        env:
          NAMESPACE: ${{ vars.NAMESPACE }}
          REPLICAS: ${{ vars.REPLICAS }}
          IMAGE: ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha }}
          INGRESS_IP: ${{ env.INGRESS_IP }}

      - name: check files
        run: |
          cat kubernetes/development/*.yaml

      - name: create mongodb secret
        run: |
          kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
          --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
          --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
          --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
          --save-config \
          --dry-run=client \
          -o yaml | kubectl apply -f -

      - name: deploy to dev env
        run: |
          kubectl apply -f kubernetes/deployment

      - name: set app ingress host url
        id: set-ingress-host-address
        run: | 
         echo "APP_INGRESS_HOST=$(kubectl -n ${{ vars.NAMESPACE }} get ingress -o jsonpath="{{.items[0].spec.tls[0].hosts[0]}}")" >> "$GITHUB_OUTPUT"

    dev-integration-test:
      if: contains(github.ref, 'feature/')
      name: dev integration testing
      needs: dev-deploy
      runs-on: ubuntu-latest
      steps:
      - name: test uri output using curl and jg
        env:
          URL: ${{ needs.dev-deploy.outputs.APP_INGRESS_URL }}
        run: |
          echo $URL
          echo "................................"
          curl https://$URL/live -s -k | jq -r .status | grep -i live

    prod-deploy:
      if: github.ref == 'refs/heads/main'
      needs: docker
      environment:
        name: production
        url: https://${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }} 
      outputs:
        APP_INGRESS_URL: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
      runs-on: ubuntu-latest
      steps: 
      - name: checkout repo
        uses: actions/checkout@v4

      - name: k8s kubeconfig
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: install kubectl clt
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.26.0'

      - name: fetch k8s cluster details
        run: |
          kubectl version 
          echo ----------------
          kubectl get nodes

      - name: save nginx ingress controller ip as a github env variable
        run: |
          echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}")" >> $GITHUB_ENV

      - name: Replace tokens in manifest files
        uses: cschleiden/replace-token@v1
        with:
          tokenPrefix: '_{_'
          tokenSuffix: '_}_'
          files: '["kubernetes/production/*.yaml"]'
        env:
          NAMESPACE: ${{ vars.NAMESPACE }}
          REPLICAS: ${{ vars.REPLICAS }}
          IMAGE: ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha }}
          INGRESS_IP: ${{ env.INGRESS_IP }}

      - name: check files
        run: |
          cat kubernetes/production/*.yaml

      - name: create mongodb secret
        run: |
          kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
          --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
          --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
          --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
          --save-config \
          --dry-run=client \
          -o yaml | kubectl apply -f -

      - name: deploy to prod env
        run: |
          kubectl apply -f kubernetes/production

      - name: set app ingress host url
        id: set-ingress-host-address
        run: | 
         echo "APP_INGRESS_HOST=$(kubectl -n ${{ vars.NAMESPACE }} get ingress -o jsonpath="{{.items[0].spec.tls[0].hosts[0]}}")" >> "$GITHUB_OUTPUT"

    prod-integration-test:
      if: github.ref == 'refs/heads/main'
      name: prod integration testing
      needs: prod-deploy
      runs-on: ubuntu-latest
      steps:
      - name: test uri output using curl and jg
        env:
          URL: ${{ needs.prod-deploy.outputs.APP_INGRESS_URL }}
        run: |
          echo $URL
          echo "................................"
          curl https://$URL/live -s -k | jq -r .status | grep -i live




      










              


        

        

          


        
        
